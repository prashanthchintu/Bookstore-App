{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/Login.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","books","_this2","axios","defaults","headers","common","localStorage","getItem","get","then","res","setState","data","console","log","catch","error","response","status","history","push","react_default","a","createElement","class","map","book","title","author","Component","Boolean","window","location","hostname","match","Login","onChange","e","target","name","value","onSubmit","preventDefault","_this$state","username","password","post","result","setItem","token","message","_this$state2","role","for","type","placeholder","required","ReactDOM","render","BrowserRouter","Route","exact","path","component","Register","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6f4bc92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      books: []\n    };\n  }\n\n  componentDidMount() {\n    axios.defaults.headers.common[\"Authorization\"] = localStorage.getItem(\"jwtToken\");\n    axios.get(\"/api/book\")\n      .then(res => {\n        this.setState({ books: res.data });\n        console.log(res.data);\n      })\n      .catch((error )=> {\n        if (error.response.status === 401) {\n          this.props.history.push(\"/login\");\n        }\n      });\n  }\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h3> List of Books </h3>\n          </div>\n          <div class=\"panel-body\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Title</th>\n                  <th>Author</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.books.map(book => \n                  <tr>\n                    <td>{book.title}</td>\n                    <td>{book.author}</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n    window.addEventListener('fetch',(event) => {\n      if (event.request.url.match('^.*(\\/api\\/).*$')) {\n        return false;\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\n//import './Login.css';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         username : '',\r\n         password : '',\r\n         message : ''\r\n      }\r\n    }\r\n\r\n    onChange=(e)=>{\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state);\r\n        \r\n    }\r\n\r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const {username,password} = this.state;\r\n        axios.post('/api/auth/login',{username,password})\r\n        .then((result)=>{\r\n            localStorage.setItem('jwtToken',result.data.token)\r\n            this.setState({message : ''})\r\n            this.props.history.push('/')\r\n        })\r\n        .catch((error)=>{\r\n            if(error.response.status === 401){\r\n            this.setState({message : 'Login Failed . you are not authorized'})\r\n                \r\n            }\r\n        })\r\n\r\n    }\r\n    render(){\r\n        const {username,password,message} = this.state\r\n        return(\r\n            <div class=\"container\">\r\n            <form onSubmit={this.onSubmit}>\r\n            {message !== '' && <div class=\"alert alert-warning alert-dismissible\" role=\"alert\">\r\n            {message}\r\n            </div>}\r\n                <h2 class=\"form-signin-heading\">Please Login In </h2>\r\n                <label for=\"inputEmail\" class=\"sr-only\">Email Address</label>\r\n                <input type=\"email\" class=\"form-control\" placeholder=\"Enter Email Address\" name=\"username\" value={username} onChange={this.onChange} required> </input>\r\n                <label for=\"inputEmail\" class=\"sr-only\">Password</label>\r\n                <input type=\"email\" class=\"form-control\" placeholder=\"Enter Password\" name=\"password\" value={password} onChange={this.onChange} required> </input>\r\n                <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Login</button>\r\n            </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Register from \"./components/Register\";\nimport Login from \"./components/Login\";\n\nReactDOM.render(\n    <Router>\n    <Route exact path=\"/\" component={App} />\n    <Route exact path=\"/login\" component={Login} />\n    <Route exact path=\"/register\" component={Register} />\n  </Router>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}